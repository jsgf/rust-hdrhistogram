var searchIndex = {};
searchIndex['hdrhistogram'] = {"items":[[0,"","hdrhistogram","# Rust binding for HdrHistogram_c",null,null],[3,"Histogram","","Instance of a Histogram.",null,null],[3,"HistogramErr","","Catch-all error return.",null,null],[3,"LinearIter","","Iterator over `Histogram` producing linear buckets.",null,null],[3,"LogIter","","Iterator over `Histogram` producing logarithmic buckets.",null,null],[3,"PercentileIter","","Iterator over `Histogram` producing percentile buckets.",null,null],[3,"RecordedIter","","Iterator over `Histogram` producing recorded values.",null,null],[3,"CountIterItem","","Iterator result producing counts.",null,null],[12,"count_added_in_this_iteration_step","","The count of recorded values in the histogram that were added to the `total_count_to_this_value`\n(below) as a result on this iteration step. Since multiple iteration steps may occur with\noverlapping equivalent value ranges, the count may be lower than the count found at the\nvalue (e.g. multiple linear steps or percentile levels can occur within a single equivalent\nvalue range)",0,null],[12,"count","","The sum of all recorded values in the histogram at values equal or smaller than `value_from_index`.",0,null],[12,"value","","The actual value level that was iterated to by the iterator",0,null],[12,"highest_equivalent_value","","Highest value equivalent to `value`.",0,null],[12,"median_equivalent_value","","Median value equivalent to `value`.",0,null],[12,"lowest_equivalent_value","","Lowest value equivalent to `value`.",0,null],[3,"PercentileIterItem","","Iterator result producing percentiles.",null,null],[12,"percentile","","The percentile of recorded values in the histogram at values equal or smaller than `value_from_index`.",1,null],[12,"count","","The sum of all recorded values in the histogram at values equal or smaller than `value_from_index`.",1,null],[12,"value","","The actual value level that was iterated to by the iterator",1,null],[12,"highest_equivalent_value","","Highest value equivalent to `value`.",1,null],[12,"median_equivalent_value","","Median value equivalent to `value`.",1,null],[12,"lowest_equivalent_value","","Lowest value equivalent to `value`.",1,null],[11,"fmt","","",2,{"inputs":[{"name":"histogramerr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"histogramerr"}],"output":{"name":"histogramerr"}}],[11,"fmt","","",2,{"inputs":[{"name":"histogramerr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"histogramerr"}],"output":{"name":"str"}}],[11,"init","","Create a new Histogram instance. `lowest_trackable_value`..`highest_trackable_value` defines\nthe range of values in the `Histogram`. `lowest_trackable_value` must be >= 1.\n`significant_figures` defines the precision, and must be in the range 1..5.",3,{"inputs":[{"name":"histogram"},{"name":"u64"},{"name":"u64"},{"name":"u32"}],"output":{"name":"result"}}],[11,"reset","","Zero all histogram state in place.",3,{"inputs":[{"name":"histogram"}],"output":null}],[11,"record_value","","Record a specific value. Returns true if successful.",3,{"inputs":[{"name":"histogram"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"record_values","","Record multiple counts of a specific value. Returns true if successful.",3,{"inputs":[{"name":"histogram"},{"name":"u64"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"record_corrected_value","","Record a value, correcting for coordinated omission. This should be used when accumulating\nlatency measurements taked on a regular timebase (expected_interval). Any latency that's\nwell above that interval implies some kind of outage in which sampled were lost. This\ncorrects for those lost samples to preserve the integrity of the overall statistics.",3,{"inputs":[{"name":"histogram"},{"name":"u64"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"record_corrected_values","","As with `record_corrected_value()` but multiple counts of the value.",3,{"inputs":[{"name":"histogram"},{"name":"u64"},{"name":"u64"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"add","","Sum two histograms, modifying `self` in place. Returns the number of samples dropped;\nsamples will be dropped if they're out of the range `lowest_trackable_value\n.. highest_trackable_value`.",3,{"inputs":[{"name":"histogram"},{"name":"histogram"}],"output":{"name":"u64"}}],[11,"add_while_correcting_for_coordinated_omission","","As with `add` but corrects of potential lost samples while doing periodic latency\nmeasurements, as in `record_corrected_value`.  Only one correction should be applied.",3,{"inputs":[{"name":"histogram"},{"name":"histogram"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"total_count","","Total of all counters",3,{"inputs":[{"name":"histogram"}],"output":{"name":"u64"}}],[11,"min","","Smallest recorded value.",3,{"inputs":[{"name":"histogram"}],"output":{"name":"u64"}}],[11,"max","","Largest recorded value.",3,{"inputs":[{"name":"histogram"}],"output":{"name":"u64"}}],[11,"value_at_percentile","","Value at a particular percentile (0-100).",3,{"inputs":[{"name":"histogram"},{"name":"f64"}],"output":{"name":"u64"}}],[11,"stddev","","Standard deviation of values.",3,{"inputs":[{"name":"histogram"}],"output":{"name":"f64"}}],[11,"mean","","Mean of values.",3,{"inputs":[{"name":"histogram"}],"output":{"name":"f64"}}],[11,"values_are_equivalent","","Returns true if two values are the same according to the lowest, highest and significant\nfigures parameters.",3,{"inputs":[{"name":"histogram"},{"name":"u64"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"lowest_equivalent_value","","Lowest value equivalent to the given value.",3,{"inputs":[{"name":"histogram"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"count_at_value","","Count for a specific value.",3,{"inputs":[{"name":"histogram"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"linear_iter","","Linear iterator over values. Results are returned in equally weighted buckets.",3,{"inputs":[{"name":"histogram"},{"name":"u64"}],"output":{"name":"lineariter"}}],[11,"log_iter","","Logarithmic iterator over values. Results are returned in logarithmically weighted buckets.",3,{"inputs":[{"name":"histogram"},{"name":"u64"},{"name":"f64"}],"output":{"name":"logiter"}}],[11,"recorded_iter","","Iterator over recorded values.",3,{"inputs":[{"name":"histogram"}],"output":{"name":"recordediter"}}],[11,"percentile_iter","","Iterator over percentiles.",3,{"inputs":[{"name":"histogram"},{"name":"u32"}],"output":{"name":"percentileiter"}}],[11,"encode","","Encode `Histogram` state into a Base64 encoded string.",3,{"inputs":[{"name":"histogram"}],"output":{"name":"result"}}],[11,"decode","","Decode `Histogram` state from a Base64 string generated by `encode`.",3,{"inputs":[{"name":"histogram"},{"name":"string"}],"output":{"name":"result"}}],[11,"drop","","",3,{"inputs":[{"name":"histogram"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"histogram"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"countiteritem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"countiteritem"}],"output":{"name":"countiteritem"}}],[11,"cmp","","",0,{"inputs":[{"name":"countiteritem"},{"name":"countiteritem"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"countiteritem"},{"name":"countiteritem"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"countiteritem"},{"name":"countiteritem"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"countiteritem"},{"name":"countiteritem"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"countiteritem"},{"name":"countiteritem"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"countiteritem"},{"name":"countiteritem"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"countiteritem"},{"name":"countiteritem"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"countiteritem"},{"name":"countiteritem"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"percentileiteritem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"percentileiteritem"}],"output":{"name":"percentileiteritem"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"percentileiteritem"},{"name":"percentileiteritem"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"percentileiteritem"},{"name":"percentileiteritem"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"percentileiteritem"},{"name":"percentileiteritem"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"percentileiteritem"},{"name":"percentileiteritem"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"percentileiteritem"},{"name":"percentileiteritem"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"percentileiteritem"},{"name":"percentileiteritem"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"percentileiteritem"},{"name":"percentileiteritem"}],"output":{"name":"bool"}}],[11,"next","","",4,{"inputs":[{"name":"lineariter"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"logiter"}],"output":{"name":"option"}}],[11,"next","","",6,{"inputs":[{"name":"recordediter"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"percentileiter"}],"output":{"name":"option"}}],[6,"Result","","Result from operations which may fail.",null,null]],"paths":[[3,"CountIterItem"],[3,"PercentileIterItem"],[3,"HistogramErr"],[3,"Histogram"],[3,"LinearIter"],[3,"LogIter"],[3,"RecordedIter"],[3,"PercentileIter"]]};
initSearch(searchIndex);
